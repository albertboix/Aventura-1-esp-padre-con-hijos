<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Aventura 1: Descubre Valencia (Padre)</title>
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <style>
        /* CSS para el padre (Aventura 1: Descubre Valencia (Padre).html) */
        body {
            font-family: "Book Antiqua", "Palatino Linotype", "Palatino", Georgia, serif;
            margin: 1em;
            background: #fff;
            color: #222;
            font-size: 16px;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: calc(100vh - 2em);
            justify-content: flex-start;
        }
        h2 {
            margin-bottom: 0.8em;
            text-align: center;
            width: 100%;
        }

        /* Contenedor principal para iframes */
        #reto-container {
            /* Los bordes deben ser siempre de igual grosor. */
            border: 3px solid #ccc; /* Grosor inicial */
            border-radius: 8px;
            padding: 0;
            margin-bottom: 1em;
            position: relative;
            min-height: 250px;
            width: 100%;
            max-width: 980px;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            transition: border-color 0.3s ease-in-out; /* Transición suave para el color del borde */
        }

        #reto-iframe,
        #puzzleIframe {
            width: 100%;
            height: 600px;
            border: none;
            display: none; /* Ocultos por defecto */
        }

        #button-container-padre {
            display: flex;
            flex-wrap: wrap;
            gap: 1em;
            margin-top: 1em;
            justify-content: center;
            width: 100%;
            min-height: 40px;
        }

        button.btn-padre {
            padding: 0.6em 1.2em;
            font-size: 1.1em;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            background-color: #0077cc;
            color: white;
            user-select: none;
            transition: background-color 0.3s ease;
        }
        button.btn-padre:hover {
            background-color: #005699;
        }
        button.btn-padre:disabled {
            background-color: #999;
            cursor: not-allowed;
        }

        #btnNextAfterReto {
            background-color: #0077cc;
            display: none; /* Oculto por defecto */
        }
        #btnNextAfterReto:hover {
            background-color: #005699;
        }

        /* Clases para el borde del contenedor, aplicadas por el padre */
        #reto-container.correct {
            border-color: #28a745; /* Verde */
        }
        #reto-container.incorrect {
            border-color: #c00; /* Rojo */
        }
        #reto-container.ready {
            border-color: #0077cc; /* Azul para "esperando respuesta" */
        }
        #reto-container.revealed {
            border-color: #ffc107; /* Naranja/Amarillo para respuesta mostrada */
        }
        #reto-container.no-reto {
            border-color: transparent; /* Transparente si no hay reto/puzzle */
        }

        /* Estilos para el reproductor de audio */
        .audio-player-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1em;
            margin-bottom: 2em;
            padding: 1em;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
            width: 100%;
            max-width: 600px;
        }

        #audioControlContainer {
            display: flex;
            align-items: center;
            gap: 1em;
            width: 100%;
            justify-content: center;
        }

        /* El botón de play/pause ahora es un placeholder para el hijo */
        #playPauseBtn {
            padding: 1em;
            font-size: 1.2em;
            border: none;
            border-radius: 50%;
            background-color: #6c757d; /* Gris para indicar que no está activo todavía */
            color: white;
            cursor: pointer;
            width: 50px;
            height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease;
        }
        #playPauseBtn.active { /* Clase para cuando está activo por proximidad */
            background-color: #28a745; /* Verde */
        }
        #playPauseBtn:hover:not(:disabled):not(.active) {
            background-color: #5a6268;
        }
        #playPauseBtn.active:hover:not(:disabled) {
            background-color: #218838;
        }

        #playPauseBtn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        #playPauseBtn i {
            pointer-events: none; /* Evita que el icono interfiera con el click del botón */
        }

        #progressBarContainer {
            flex-grow: 1; /* Ocupa el espacio disponible */
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            cursor: pointer;
            position: relative;
        }

        #progressBar {
            height: 100%;
            width: 0%;
            background-color: #0077cc;
            border-radius: 4px;
        }

        #currentTime,
        #duration {
            font-size: 0.9em;
            color: #555;
            min-width: 40px; /* Para evitar saltos de texto */
            text-align: center;
        }

        #locationStatus {
            font-size: 0.9em;
            margin-top: 0.5em;
            text-align: center;
        }

        /* Controles de depuración para GPS */
        #gpsDebugControls {
            margin-top: 1.5em;
            padding: 1em;
            border: 1px dashed #ccc;
            border-radius: 8px;
            background-color: #f0f0f0;
            text-align: center;
            width: 100%;
            max-width: 600px;
        }
        #gpsDebugControls button {
            background-color: #0077cc;
            color: white;
            padding: 0.5em 1em;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 0.5em;
        }
        #gpsDebugControls button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        #terminarAventuraBtn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #ff4d4d; /* Rojo para "Terminar" */
            color: white;
            padding: 1em 1.5em;
            border-radius: 50px; /* Botón flotante redondo */
            font-size: 1.1em;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
            display: none; /* Oculto por defecto, se muestra al final */
        }
        #terminarAventuraBtn:hover {
            background-color: #cc0000;
        }

        /* Overlay para la pantalla de bienvenida/permisos */
        #welcomeOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        #welcomeBox {
            background: #fff;
            padding: 2em;
            border-radius: 10px;
            text-align: center;
            max-width: 500px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            color: #333;
        }
        #welcomeBox h1 {
            color: #0077cc;
            margin-bottom: 1em;
        }
        #welcomeBox p {
            margin-bottom: 1.5em;
            line-height: 1.5;
        }
        #welcomeBox button {
            background-color: #0077cc;
            color: white;
            padding: 0.8em 2em;
            border: none;
            border-radius: 6px;
            font-size: 1.1em;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        #welcomeBox button:hover {
            background-color: #005699;
        }


        /* Media Queries para pantallas más pequeñas */
        @media (max-width: 800px) and (orientation: landscape) {
            h2 {
                display: none;
            }
            body {
                margin: 0.5em;
            }
            #reto-container {
                min-height: auto;
                height: calc(100dvh - 80px);
                padding: 0;
                margin-bottom: 0.5em;
            }
            #reto-iframe,
            #puzzleIframe {
                height: 100%;
                max-width: 100%;
            }
            button.btn-padre {
                font-size: 1em;
                padding: 0.5em 1em;
            }
            .audio-player-container,
            #gpsDebugControls {
                max-width: 100%;
            }
        }

        @media (max-width: 600px) and (orientation: portrait) {
            #reto-iframe,
            #puzzleIframe {
                height: 400px;
            }
            #reto-container {
                min-height: 400px;
            }
        }
    </style>
</head>
<body>
    <div id="welcomeOverlay">
        <div id="welcomeBox">
            <h1>¡Bienvenido a tu Aventura en Valencia!</h1>
            <p>
                Para disfrutar de esta experiencia, necesitamos acceder a algunas funciones de tu dispositivo.
                Por favor, acepta los permisos de <strong>ubicación (GPS)</strong> y permite la reproducción de <strong>audio</strong>.
                Esto nos permitirá guiarte por los puntos de interés y activar los retos y narraciones en el momento justo.
            </p>
            <button id="acceptPermissionsBtn">Aceptar y Empezar Aventura</button>
        </div>
    </div>

    <h2>Aventura 1: Descubre Valencia</h2>

    <div id="reto-container">
        <iframe id="reto-iframe" src="Aventura_1_retos_espanol.html"></iframe>
        <iframe id="puzzleIframe" src=""></iframe>
        <div id="loading-message" style="text-align: center; padding: 2em; font-size: 1.2em; display: none;">
            Cargando...
        </div>
    </div>

    <div class="audio-player-container" id="audioPlayerWrapper" style="display: none;">
        <h3>Audio del Punto <span id="currentAudioPoint"></span></h3>
        <iframe id="audioIframe" src="audio_player_hijo.html" style="width: 100%; height: 120px; border: none; display: none;"></iframe>
        <p id="locationStatus" style="color: red; font-weight: bold;">Esperando ubicación...</p>
    </div>

    <div id="button-container-padre">
        <button id="btnNextAfterReto" class="btn-padre">Continuar con la Aventura</button>
    </div>

    <div id="gpsDebugControls">
        <h4>Modo de Prueba GPS (Solo para desarrollo)</h4>
        <button id="toggleGpsMode">Activar/Desactivar GPS Real</button>
        <p>Estado GPS: <span id="gpsModeStatus">Real (intentando obtener)</span></p>
        <button id="simulateProximityBtn" disabled>Simular Proximidad</button>
    </div>

    <button id="terminarAventuraBtn">Terminar su Aventura</button>

    <script>
        // --- Secuencia de la Aventura 1 en Español (con coordenadas y radios) ---
        const secuenciaAventura = [
            // --- PARADA 1: Torres de Serranos ---
            { nombreParada: "Torres de Serranos", ubicacion: { lat: 39.4795, lon: -0.3758, radio: 20 }, pasos: [
                { tipo: "audio", idAudio: "audio_serranos_intro" },
                { tipo: "reto-interactivo", indexRetoHijo: 0 }, // Reto 1
                { tipo: "reto-interactivo", indexRetoHijo: 1 }, // Reto 2
                { tipo: "reto-interactivo", indexRetoHijo: 2 }  // Reto 3
            ]},
            // --- PARADA 2: Calle Muro de Santa Ana ---
            { nombreParada: "Calle Muro de Santa Ana", ubicacion: { lat: 39.4770, lon: -0.3780, radio: 15 }, pasos: [
                { tipo: "audio", idAudio: "audio_muro_santa_ana" },
                { tipo: "reto-interactivo", indexRetoHijo: 3 }, // Reto 4
                { tipo: "reto-interactivo", indexRetoHijo: 4 }, // Reto 5
                { tipo: "reto-interactivo", indexRetoHijo: 5 }  // Reto 6
            ]},
            // --- PARADA 3: Plaza de la Virgen ---
            { nombreParada: "Plaza de la Virgen", ubicacion: { lat: 39.4752, lon: -0.3752, radio: 25 }, pasos: [
                { tipo: "audio", idAudio: "audio_plaza_virgen" },
                { tipo: "reto-interactivo", indexRetoHijo: 6 }, // Reto 7
                { tipo: "puzzle", src: "P8_puzzle_plaza_virgen.html" } // Puzzle 8
            ]},
            // --- PARADA 4: Fachada de la Catedral (Puerta de los Apóstoles) ---
            { nombreParada: "Fachada de la Catedral", ubicacion: { lat: 39.4752, lon: -0.3750, radio: 10 }, pasos: [
                { tipo: "audio", idAudio: "audio_catedral_fachada" },
                { tipo: "reto-interactivo", indexRetoHijo: 7 }, // Reto 9
                { tipo: "reto-interactivo", indexRetoHijo: 8 }  // Reto 10
            ]},
            // --- PARADA 5: Calle Miguelete ---
            { nombreParada: "Calle Miguelete", ubicacion: { lat: 39.4754, lon: -0.3740, radio: 15 }, pasos: [
                { tipo: "audio", idAudio: "audio_miguelete" },
                { tipo: "reto-interactivo", indexRetoHijo: 9 }, // Reto 11
                { tipo: "reto-interactivo", indexRetoHijo: 10 } // Reto 12
            ]},
            // --- PARADA 6: Baños Árabes (en el Palacio de Benicarló) ---
            { nombreParada: "Baños Árabes", ubicacion: { lat: 39.4760, lon: -0.3735, radio: 15 }, pasos: [
                { tipo: "audio", idAudio: "audio_banos_arabes" },
                { tipo: "reto-interactivo", indexRetoHijo: 11 }, // Reto 13
                { tipo: "reto-interactivo", indexRetoHijo: 12 }, // Reto 14
                { tipo: "reto-interactivo", indexRetoHijo: 13 } // Reto 15
            ]},
            // --- PARADA 7: Plaza del Ayuntamiento ---
            { nombreParada: "Plaza del Ayuntamiento", ubicacion: { lat: 39.4695, lon: -0.3768, radio: 20 }, pasos: [
                { tipo: "audio", idAudio: "audio_ayuntamiento" },
                { tipo: "reto-interactivo", indexRetoHijo: 14 }, // Reto 16
                { tipo: "reto-interactivo", indexRetoHijo: 15 }  // Reto 17
            ]},
            // --- PARADA 8: Plaza de Toros y Estación del Norte ---
            { nombreParada: "Plaza de Toros y Estación del Norte", ubicacion: { lat: 39.4678, lon: -0.3768, radio: 30 }, pasos: [
                { tipo: "audio", idAudio: "audio_toros_estacion" },
                { tipo: "puzzle", src: "P18_puzzle_plaza_de_Toros_y_estacion_norte.html" } // Puzzle 18
            ]},
            // --- PARADA 9: Mercado Central ---
            { nombreParada: "Mercado Central", ubicacion: { lat: 39.4735, lon: -0.3775, radio: 20 }, pasos: [
                { tipo: "audio", idAudio: "audio_mercado_central" },
                { tipo: "reto-interactivo", indexRetoHijo: 16 } // Reto 19
            ]},
            // --- PARADA 10: Edificio de Correos ---
            { nombreParada: "Edificio de Correos", ubicacion: { lat: 39.4690, lon: -0.3760, radio: 10 }, pasos: [
                { tipo: "audio", idAudio: "audio_correos" },
                { tipo: "reto-interactivo", indexRetoHijo: 17 }, // Reto 20
                { tipo: "reto-interactivo", indexRetoHijo: 18 }, // Reto 21
                { tipo: "reto-interactivo", indexRetoHijo: 19 }, // Reto 22
                { tipo: "reto-interactivo", indexRetoHijo: 20 }  // Reto 23
            ]},
            // --- PARADA 11: Iglesia de San Nicolás ---
            { nombreParada: "Iglesia de San Nicolás", ubicacion: { lat: 39.4765, lon: -0.3790, radio: 15 }, pasos: [
                { tipo: "audio", idAudio: "audio_san_nicolas" },
                { tipo: "reto-interactivo", indexRetoHijo: 21 }, // Reto 24
                { tipo: "reto-interactivo", indexRetoHijo: 22 }  // Reto 25
            ]},
            // --- PARADA 12: Lonja de la Seda ---
            { nombreParada: "Lonja de la Seda", ubicacion: { lat: 39.4740, lon: -0.3760, radio: 20 }, pasos: [
                { tipo: "audio", idAudio: "audio_lonja_seda" },
                { tipo: "puzzle", src: "P26_puzzle_lonja.html" }, // Puzzle 26
                { tipo: "reto-interactivo", indexRetoHijo: 23 }, // Reto 27
                { tipo: "reto-interactivo", indexRetoHijo: 24 }, // Reto 28
                { tipo: "reto-interactivo", indexRetoHijo: 25 }, // Reto 29
                { tipo: "reto-interactivo", indexRetoHijo: 26 }, // Reto 30
                { tipo: "reto-interactivo", indexRetoHijo: 27 }, // Reto 31 (Extra)
                { tipo: "reto-interactivo", indexRetoHijo: 28 }  // Reto 32
            ]}
        ];

        // --- Elementos del DOM ---
        const welcomeOverlay = document.getElementById('welcomeOverlay');
        const acceptPermissionsBtn = document.getElementById('acceptPermissionsBtn');
        const retoContainer = document.getElementById("reto-container");
        const retoIframe = document.getElementById("reto-iframe");
        const puzzleIframe = document.getElementById("puzzleIframe");
        const audioIframe = document.getElementById("audioIframe"); // Nuevo iframe para el audio hijo
        const btnNextAfterReto = document.getElementById("btnNextAfterReto");
        const loadingMessage = document.getElementById("loading-message");

        // Audio Player DOM elements (now only for parent display)
        const audioPlayerWrapper = document.getElementById("audioPlayerWrapper");
        const locationStatusSpan = document.getElementById('locationStatus');
        const currentAudioPointSpan = document.getElementById("currentAudioPoint");

        // GPS DOM elements
        const toggleGpsModeBtn = document.getElementById('toggleGpsMode');
        const gpsModeStatusSpan = document.getElementById('gpsModeStatus');
        const simulateProximityBtn = document.getElementById('simulateProximityBtn');

        // End Adventure button
        const terminarAventuraBtn = document.getElementById("terminarAventuraBtn");

        // --- Variables de Estado Globales ---
        let indiceParadaActual = 0;
        let indicePasoActual = 0;
        let retoHijoEstaListo = false; // Bandera para saber si el iframe del reto está listo
        let audioHijoEstaListo = false; // Bandera para saber si el iframe de audio está listo

        // --- Variables de Estado para Geolocalización ---
        let userLatitude = null;
        let userLongitude = null;
        const DEFAULT_PROXIMITY_RADIUS_METERS = 15; // Radio por defecto si no se especifica en la parada
        let gpsWatcherId = null; // Para guardar el ID del watcher de geolocalización
        let isGpsRealMode = true; // true para usar GPS real, false para simular
        let isSimulatedProximity = false; // true si se está simulando proximidad
        let isUserInProximity = false; // Nuevo estado para saber si el usuario está en proximidad

        // --- Funciones de Utilidad ---

        // Haversine formula para calcular la distancia entre dos puntos GPS (en metros)
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371e3; // metres (radius of Earth)
            const φ1 = (lat1 * Math.PI) / 180; // φ, λ in radians
            const φ2 = (lat2 * Math.PI) / 180;
            const Δφ = (lat2 - lat1) * Math.PI / 180;
            const Δλ = (lon2 - lon1) * Math.PI / 180;

            const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
                      Math.cos(φ1) * Math.cos(φ2) *
                      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            const d = R * c; // in metres
            return d;
        }

        function resetRetoContainerBorders() {
            retoContainer.classList.remove('correct', 'incorrect', 'ready', 'revealed', 'no-reto');
            retoContainer.style.borderColor = '#ccc'; // Borde inicial
        }

        // --- Funciones de Control de Audio (Comunicación con el hijo) ---

        function prepareAudioStep(audioId) {
            currentAudioPointSpan.textContent = secuenciaAventura[indiceParadaActual].nombreParada;
            audioPlayerWrapper.style.display = 'flex'; // Mostrar el contenedor del reproductor de audio
            audioIframe.style.display = 'block'; // Mostrar el iframe del audio hijo
            retoContainer.style.display = 'none'; // Ocultar el contenedor de retos/puzzles
            btnNextAfterReto.style.display = 'none'; // Ocultar el botón de siguiente

            if (audioHijoEstaListo) {
                sendAudioCommandToChild('loadAudio', { idAudio: audioId, canPlay: isUserInProximity });
            } else {
                loadingMessage.textContent = "Cargando audio y verificando ubicación...";
                loadingMessage.style.display = 'block';
                console.log("Hijo de audio aún no listo, esperando para enviar audio...");
            }
            updateLocationStatus(); // Actualizar el estado de la ubicación
        }

        function sendAudioCommandToChild(command, data = {}) {
            if (audioIframe.contentWindow) {
                audioIframe.contentWindow.postMessage({ type: command, ...data }, '*');
                console.log(`Comando '${command}' enviado al hijo de audio con datos:`, data);
            } else {
                console.error("No se puede acceder a contentWindow del iframe de audio.");
            }
        }


        // --- Funciones de Manejo de Retos y Puzzles ---

        function mostrarReto(retoIndex) {
            audioPlayerWrapper.style.display = 'none'; // Ocultar reproductor de audio
            audioIframe.style.display = 'none'; // Asegurarse de que el iframe de audio esté oculto
            sendAudioCommandToChild('stopAudio'); // Detener el audio si estaba sonando

            retoContainer.style.display = 'flex'; // Mostrar el contenedor de retos/puzzles
            retoIframe.style.display = 'block'; // Mostrar el iframe de retos
            puzzleIframe.style.display = 'none'; // Asegurarse de que el puzzle esté oculto
            loadingMessage.style.display = 'none'; // Ocultar mensaje de carga
            resetRetoContainerBorders(); // Resetear los bordes
            retoContainer.classList.add("ready"); // Indicar que el padre está esperando respuesta

            if (retoHijoEstaListo) {
                retoIframe.contentWindow.postMessage({ type: 'mostrarRetoIndex', index: retoIndex }, '*');
                console.log(`Enviado retoIndex ${retoIndex} a Aventura_1_retos_espanol.html`);
            } else {
                loadingMessage.textContent = '<p style="text-align: center; padding: 2em;">Cargando reto interactivo...</p>';
                loadingMessage.style.display = 'block';
                console.log("Hijo de retos aún no listo, esperando para enviar reto...");
            }
            btnNextAfterReto.style.display = "none"; // Ocultar botón de continuar hasta que se resuelva
        }

        function mostrarPuzzle(puzzleSrc) {
            audioPlayerWrapper.style.display = 'none'; // Ocultar reproductor de audio
            audioIframe.style.display = 'none'; // Asegurarse de que el iframe de audio esté oculto
            sendAudioCommandToChild('stopAudio'); // Detener el audio si estaba sonando

            retoContainer.style.display = 'flex'; // Mostrar el contenedor de retos/puzzles
            retoIframe.style.display = 'none'; // Asegurarse de que el reto esté oculto
            puzzleIframe.src = puzzleSrc; // Cargar el puzzle específico
            puzzleIframe.style.display = 'block'; // Mostrar el iframe del puzzle
            loadingMessage.style.display = 'none'; // Ocultar mensaje de carga
            resetRetoContainerBorders(); // Resetear los bordes
            retoContainer.classList.add("ready"); // Indicar que el padre está esperando respuesta
            btnNextAfterReto.style.display = "none"; // Ocultar botón de continuar hasta que se resuelva
        }

        function ocultarContenidoDinamico() {
            audioPlayerWrapper.style.display = 'none';
            audioIframe.style.display = 'none'; // Asegurarse de ocultar el iframe del audio
            retoContainer.style.display = 'none'; // Ocultar contenedor principal si no hay nada que mostrar
            retoIframe.style.display = 'none';
            puzzleIframe.style.display = 'none';
            btnNextAfterReto.style.display = 'none';
            loadingMessage.style.display = 'none';
            resetRetoContainerBorders(); // Limpiar el borde
            sendAudioCommandToChild('stopAudio'); // Asegurarse de detener el audio al cambiar de paso
        }

        // --- Lógica de Navegación de Aventura ---

        function avanzarPaso() {
            const paradaActual = secuenciaAventura[indiceParadaActual];

            // Si el paso actual es el último de la parada, o si no hay pasos en la parada
            if (!paradaActual || indicePasoActual >= paradaActual.pasos.length -1 ) {
                 // Avanzar a la siguiente parada
                indiceParadaActual++;
                indicePasoActual = 0; // Resetear el índice de paso para la nueva parada

                if (indiceParadaActual >= secuenciaAventura.length) {
                    // ¡La aventura ha terminado!
                    console.log("¡Aventura completada!");
                    ocultarContenidoDinamico();
                    retoContainer.style.display = 'flex'; // Mostrar contenedor para el mensaje final
                    retoContainer.classList.add('no-reto'); // Eliminar borde
                    retoContainer.innerHTML = '<p style="text-align: center; padding: 2em; font-size: 1.5em;">¡Aventura Completada! ¡Gracias por participar!</p>';
                    terminarAventuraBtn.style.display = 'block'; // Mostrar botón de terminar
                    saveProgress(); // Guarda el estado final de completado
                    return; // Salir de la función
                }
            } else {
                indicePasoActual++;
            }
            
            mostrarPasoAventura();
            saveProgress(); // Guardar progreso después de cada avance
        }

        function mostrarPasoAventura() {
            ocultarContenidoDinamico(); // Ocultar todo antes de mostrar el nuevo contenido

            const paradaActual = secuenciaAventura[indiceParadaActual];
            if (!paradaActual) {
                console.error("No hay parada actual definida. Esto no debería ocurrir al final.");
                return;
            }
            const pasoActual = paradaActual.pasos[indicePasoActual];
            if (!pasoActual) {
                console.error("No hay paso actual definido en la parada:", paradaActual.nombreParada);
                // Si llegamos aquí, significa que la secuencia está mal definida
                // o estamos al final de los pasos de una parada. Intentar avanzar a la siguiente.
                avanzarPaso();
                return;
            }

            console.log(`Mostrando paso ${indicePasoActual + 1} de la parada "${paradaActual.nombreParada}":`, pasoActual.tipo);

            switch (pasoActual.tipo) {
                case "audio":
                    prepareAudioStep(pasoActual.idAudio);
                    break;
                case "reto-interactivo":
                    mostrarReto(pasoActual.indexRetoHijo);
                    break;
                case "puzzle":
                    mostrarPuzzle(pasoActual.src);
                    break;
                default:
                    console.error("Tipo de paso de aventura desconocido:", pasoActual.tipo);
                    btnNextAfterReto.style.display = "inline-block"; // Permitir avance manual si algo sale mal
            }
        }

        // --- Geolocalización y Control de Acceso por Proximidad ---

        function startGpsWatcher() {
            if (gpsWatcherId) {
                navigator.geolocation.clearWatch(gpsWatcherId);
            }
            locationStatusSpan.textContent = "Obteniendo ubicación...";
            locationStatusSpan.style.color = "orange";
            // playPauseBtn.disabled = true; // El botón de play lo controla el hijo ahora

            gpsWatcherId = navigator.geolocation.watchPosition(
                (position) => {
                    userLatitude = position.coords.latitude;
                    userLongitude = position.coords.longitude;
                    updateLocationStatus();
                },
                (error) => {
                    console.error("Error al obtener ubicación:", error);
                    let errorMessage = "Error de ubicación. Activa GPS y otorga permisos.";
                    if (error.code === error.PERMISSION_DENIED) {
                        errorMessage = "Acceso a la ubicación denegado. Por favor, habilita la ubicación en tu dispositivo y otorga permisos a la página.";
                    } else if (error.code === error.POSITION_UNAVAILABLE) {
                        errorMessage = "Ubicación no disponible. Intenta de nuevo más tarde.";
                    } else if (error.code === error.TIMEOUT) {
                        errorMessage = "Tiempo de espera agotado para obtener ubicación. Asegúrate de tener buena señal GPS.";
                    }
                    locationStatusSpan.textContent = errorMessage;
                    locationStatusSpan.style.color = "red";
                    isUserInProximity = false;
                    sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        }

        function stopGpsWatcher() {
            if (gpsWatcherId) {
                navigator.geolocation.clearWatch(gpsWatcherId);
                gpsWatcherId = null;
            }
        }

        function updateLocationStatus() {
            const paradaActual = secuenciaAventura[indiceParadaActual];
            const pasoActual = paradaActual ? paradaActual.pasos[indicePasoActual] : null;

            // Solo necesitamos verificar la ubicación para los pasos de audio
            if (!pasoActual || pasoActual.tipo !== "audio") {
                locationStatusSpan.textContent = ""; // Limpiar estado de ubicación si no es audio
                isUserInProximity = false;
                sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
                return;
            }

            const targetLocation = paradaActual.ubicacion;
            if (!targetLocation) {
                locationStatusSpan.textContent = "Error: Coordenadas de la parada no definidas.";
                locationStatusSpan.style.color = "red";
                isUserInProximity = false;
                sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
                return;
            }

            const proximityRadius = targetLocation.radio || DEFAULT_PROXIMITY_RADIUS_METERS;

            // Lógica para el modo de prueba
            if (!isGpsRealMode) {
                if (isSimulatedProximity) {
                    locationStatusSpan.textContent = "Modo de Prueba: Proximidad simulada. ¡Audio disponible!";
                    locationStatusSpan.style.color = "green";
                    isUserInProximity = true;
                } else {
                    locationStatusSpan.textContent = "Modo de Prueba: Simula proximidad para activar el audio.";
                    locationStatusSpan.style.color = "blue";
                    isUserInProximity = false;
                }
                simulateProximityBtn.disabled = false; // Habilitar botón de simulación en modo prueba
                sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
                return;
            }

            // Lógica para el modo GPS real
            simulateProximityBtn.disabled = true; // Deshabilitar botón de simulación en modo real
            if (userLatitude === null || userLongitude === null) {
                locationStatusSpan.textContent = "Esperando ubicación GPS...";
                locationStatusSpan.style.color = "orange";
                isUserInProximity = false;
                sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
                return;
            }

            const distance = calculateDistance(
                userLatitude,
                userLongitude,
                targetLocation.lat,
                targetLocation.lon
            );

            if (distance <= proximityRadius) {
                locationStatusSpan.textContent = `Estás a ${Math.round(distance)}m. ¡Audio disponible!`;
                locationStatusSpan.style.color = "green";
                isUserInProximity = true;
            } else {
                locationStatusSpan.textContent = `Estás a ${Math.round(distance)}m. Acércate más (necesitas < ${proximityRadius}m).`;
                locationStatusSpan.style.color = "red";
                isUserInProximity = false;
            }
            sendAudioCommandToChild('updateCanPlay', { canPlay: isUserInProximity }); // Informar al hijo
        }

        // --- Persistencia del Estado (localStorage) ---

        function saveProgress() {
            const progressData = {
                indiceParadaActual: indiceParadaActual,
                indicePasoActual: indicePasoActual,
                // Puedes añadir más variables si las necesitas persistir
            };
            try {
                localStorage.setItem('valenciaBeGuidesProgress', JSON.stringify(progressData));
                console.log("Progreso guardado:", progressData);
            } catch (e) {
                console.error("Error al guardar progreso en localStorage:", e);
                // No alertar en producción, quizás un log o fallback
            }
        }

        function loadProgress() {
            try {
                const savedProgress = localStorage.getItem('valenciaBeGuidesProgress');
                if (savedProgress) {
                    const progressData = JSON.parse(savedProgress);
                    indiceParadaActual = progressData.indiceParadaActual || 0;
                    indicePasoActual = progressData.indicePasoActual || 0;
                    console.log("Progreso cargado:", progressData);
                } else {
                    console.log("No hay progreso guardado. Iniciando desde el principio.");
                    indiceParadaActual = 0;
                    indicePasoActual = 0;
                }
            } catch (e) {
                console.error("Error al cargar progreso de localStorage:", e);
                // No alertar en producción, quizás un log o fallback
                indiceParadaActual = 0;
                indicePasoActual = 0;
            }
        }

        function clearAllProgress() {
            if (confirm("¿Estás seguro de que quieres terminar la aventura y borrar todo tu progreso?")) {
                try {
                    localStorage.removeItem('valenciaBeGuidesProgress');
                    console.log("Todos los datos de progreso borrados.");
                    alert("¡Aventura terminada! Todos los datos han sido borrados.");
                    location.reload(); // Recargar la página para una experiencia limpia
                } catch (e) {
                    console.error("Error al borrar progreso de localStorage:", e);
                    alert("No se pudo borrar el progreso.");
                }
            }
        }

        // --- Event Listeners ---

        // Main Adventure Navigation Button
        btnNextAfterReto.addEventListener("click", avanzarPaso);
        terminarAventuraBtn.addEventListener('click', clearAllProgress);

        // Pantalla de bienvenida y permisos
        acceptPermissionsBtn.addEventListener('click', () => {
            welcomeOverlay.style.display = 'none';
            // Iniciar la aventura solo después de aceptar
            initializeAdventure();
        });

        // Listener para mensajes de los iframes hijos
        window.addEventListener("message", (event) => {
            // Es buena práctica verificar el origin de los mensajes en producción
            // if (event.origin !== window.location.origin) return;

            console.log("Mensaje recibido del hijo:", event.data);

            if (event.data && typeof event.data === 'object') {
                switch (event.data.type) {
                    case 'reto-hijo-listo':
                        retoHijoEstaListo = true;
                        // Si el hijo está listo y el paso actual es un reto interactivo, enviarle el reto
                        const paradaActualReto = secuenciaAventura[indiceParadaActual];
                        const pasoActualReto = paradaActualReto ? paradaActualReto.pasos[indicePasoActual] : null;
                        if (pasoActualReto && pasoActualReto.tipo === "reto-interactivo") {
                            mostrarReto(pasoActualReto.indexRetoHijo); // Llamar directamente para que se muestre
                        }
                        loadingMessage.style.display = 'none'; // Ocultar mensaje de carga
                        break;
                    case 'audio-hijo-listo':
                        audioHijoEstaListo = true;
                        // Si el hijo está listo y el paso actual es un audio, prepararlo
                        const paradaActualAudio = secuenciaAventura[indiceParadaActual];
                        const pasoActualAudio = paradaActualAudio ? paradaActualAudio.pasos[indicePasoActual] : null;
                        if (pasoActualAudio && pasoActualAudio.tipo === "audio") {
                            prepareAudioStep(pasoActualAudio.idAudio);
                        }
                        loadingMessage.style.display = 'none'; // Ocultar mensaje de carga
                        break;
                    case 'reto-interactivo-completado':
                        resetRetoContainerBorders();
                        retoContainer.classList.add('correct'); // Borde verde
                        btnNextAfterReto.style.display = "inline-block";
                        break;
                    case 'reto-interactivo-fallado':
                        resetRetoContainerBorders();
                        retoContainer.classList.add('incorrect'); // Borde rojo
                        btnNextAfterReto.style.display = "inline-block"; // Permitir avanzar incluso si falló
                        break;
                    case 'reto-respuesta-mostrada':
                        resetRetoContainerBorders();
                        retoContainer.classList.add('revealed'); // Borde amarillo/naranja
                        btnNextAfterReto.style.display = "inline-block"; // Ahora sí se muestra el botón de avance
                        break;
                    case 'puzzle-completado': // Mensaje esperado de los puzzles
                        // Los puzzles no tienen borde de estado en el padre, solo se habilitará el avance
                        btnNextAfterReto.style.display = "inline-block";
                        break;
                    case 'audio-ended':
                        // El audio ha terminado, permitir al usuario avanzar
                        btnNextAfterReto.style.display = "inline-block";
                        break;
                }
            }
        });

        // --- Controles de depuración GPS ---
        toggleGpsModeBtn.addEventListener('click', () => {
            isGpsRealMode = !isGpsRealMode;
            if (isGpsRealMode) {
                startGpsWatcher(); // Inicia el watcher de GPS real
                gpsModeStatusSpan.textContent = "Real (intentando obtener)";
                isSimulatedProximity = false; // Desactivar simulación al volver a real
            } else {
                stopGpsWatcher(); // Detiene el watcher
                gpsModeStatusSpan.textContent = "Modo Prueba (GPS real DESACTIVADO)";
            }
            updateLocationStatus(); // Actualiza el estado de la UI y los botones
        });

        simulateProximityBtn.addEventListener('click', () => {
            if (!isGpsRealMode) { // Solo si estamos en modo de prueba (GPS real desactivado)
                isSimulatedProximity = !isSimulatedProximity; // Alternar simulación
                updateLocationStatus(); // Actualiza el estado de la UI y los botones
            } else {
                alert("Desactiva el GPS real para usar la simulación de proximidad.");
            }
        });

        // --- Función para inicializar la aventura después de aceptar permisos ---
        function initializeAdventure() {
            loadProgress(); // Cargar el progreso guardado
            ocultarContenidoDinamico(); // Esconder los iframes y el reproductor al inicio

            // Inicia el watcher de GPS
            if (isGpsRealMode) {
                startGpsWatcher();
                gpsModeStatusSpan.textContent = "Real (intentando obtener)";
            } else {
                gpsModeStatusSpan.textContent = "Modo Prueba (GPS real DESACTIVADO)";
                updateLocationStatus(); // Actualiza el estado sin GPS real
            }

            // Mostrar el botón de terminar aventura si ya estamos en el último paso final.
            if (indiceParadaActual === secuenciaAventura.length -1 && indicePasoActual === secuenciaAventura[indiceParadaActual].pasos.length -1) {
                 terminarAventuraBtn.style.display = 'block';
            }

            // Al iniciar la aventura, mostramos el primer paso
            mostrarPasoAventura();
        }

        // Mostrar la pantalla de bienvenida al cargar la página
        window.addEventListener("DOMContentLoaded", () => {
            welcomeOverlay.style.display = 'flex';
        });
    </script>
</body>
</html>
